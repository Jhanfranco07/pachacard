// prisma/schema.sqlite.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../generated/sqlite"
}

datasource db {
  provider = "sqlite"
  url      = env("SQLITE_URL")
}



model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String
  passwordHash String
  tier         String
  status       String       @default("ACTIVE")
  role         String       @default("USER")
  tokenVersion Int          @default(1)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  redemptions  Redemption[]
}

model Business {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  ruc       String?
  address   String?
  contact   String?
  status    String   @default("ACTIVE")

  // Logo/imagen del negocio (opcional)
  imageUrl  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  discounts   Discount[]
  categories  BusinessCategory[]
  redemptions Redemption[]
}

model Discount {
  id           String   @id @default(cuid())
  code         String   @unique
  title        String
  description  String
  images       String?
  imageUrl     String?

  // visibilidad por tier
  tierBasic    Boolean  @default(false)
  tierNormal   Boolean  @default(false)
  tierPremium  Boolean  @default(false)

  // vigencia
  startAt      DateTime
  endAt        DateTime

  // límites
  limitPerUser Int?
  limitTotal   Int?
  usedTotal    Int       @default(0)

  terms        String?
  status       String    @default("DRAFT")

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // 1 → N (opcional) con Business
  businessId String?
  business   Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)

  // N ↔ M con Category
  categories  DiscountCategory[]

  // Canjes
  redemptions Redemption[]

  @@index([status, startAt, endAt])
  @@index([businessId])
}

model Redemption {
  id         String   @id @default(cuid())
  userId     String
  discountId String
  businessId String
  redeemedAt DateTime @default(now())
  channel    String   @default("qr")
  meta       String?

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  discount Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([discountId])
  @@index([businessId])
}

model Category {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  icon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Lados de N:M
  discounts  DiscountCategory[]
  businesses BusinessCategory[]

  @@index([slug])
}

// N:M Discount ↔ Category
model DiscountCategory {
  discountId String
  categoryId String

  discount Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([discountId, categoryId])
  @@index([categoryId])
}

// N:M Business ↔ Category
model BusinessCategory {
  businessId String
  categoryId String

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([businessId, categoryId])
  @@index([categoryId])
}
